name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          portaudio19-dev \
          alsa-utils \
          pulseaudio \
          redis-server \
          ffmpeg
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8
    
    - name: Start Redis
      run: |
        sudo systemctl start redis-server
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Format check with black
      run: |
        black --check src/
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --cov=src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: voice-assistant-ui/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd voice-assistant-ui
        npm ci
    
    - name: Build frontend
      run: |
        cd voice-assistant-ui
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: voice-assistant-ui/dist/

  integration-test:
    runs-on: ubuntu-latest
    needs: [test, build-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          portaudio19-dev \
          alsa-utils \
          pulseaudio \
          redis-server \
          ffmpeg
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: voice-assistant-ui/dist/
    
    - name: Start services
      run: |
        sudo systemctl start redis-server
        # Start mock Navidrome server for testing
        python tests/mock_navidrome_server.py &
        sleep 5
    
    - name: Run integration tests
      run: |
        python test_suite.py
    
    - name: Test installation script
      run: |
        # Test installation script in dry-run mode
        bash install.sh --dry-run

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r src/ -f json -o bandit-report.json
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan
        path: bandit-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: [test, build-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: voiceassistant/navidrome-voice
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    runs-on: ubuntu-latest
    needs: [test, build-frontend, integration-test, docker-build]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: voice-assistant-ui/dist/
    
    - name: Build package
      run: |
        python -m build
    
    - name: Create release archive
      run: |
        tar --exclude='.git' --exclude='node_modules' --exclude='__pycache__' \
            -czf voice-assistant-navidrome-${{ github.event.release.tag_name }}.tar.gz \
            .
    
    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./voice-assistant-navidrome-${{ github.event.release.tag_name }}.tar.gz
        asset_name: voice-assistant-navidrome-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

