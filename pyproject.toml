[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "voice-assistant-navidrome"
version = "1.0.0"
description = "Privacy-first voice assistant for Navidrome music server"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Voice Assistant Contributors", email = "contributors@voice-assistant.dev"}
]
maintainers = [
    {name = "Voice Assistant Team", email = "maintainers@voice-assistant.dev"}
]
keywords = [
    "voice-assistant",
    "navidrome",
    "music",
    "speech-recognition",
    "privacy",
    "offline",
    "home-automation"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Multimedia :: Sound/Audio",
    "Topic :: Home Automation",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "redis>=5.0.0",
    "aiohttp>=3.9.0",
    "pydantic>=2.5.0",
    "pyyaml>=6.0.1",
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "sounddevice>=0.4.6",
    "vosk>=0.3.45",
    "openai-whisper>=20231117",
    "openwakeword>=0.5.1",
    "asyncio-mqtt>=0.16.0",
    "python-multipart>=0.0.6",
    "jinja2>=3.1.2",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.6.0",
    "pylint>=3.0.0",
    "bandit>=1.7.5",
]
docs = [
    "sphinx>=7.2.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.25.0",
    "myst-parser>=2.0.0",
]
docker = [
    "gunicorn>=21.2.0",
]

[project.urls]
Homepage = "https://github.com/voice-assistant/navidrome-voice"
Documentation = "https://voice-assistant.github.io/navidrome-voice/"
Repository = "https://github.com/voice-assistant/navidrome-voice.git"
"Bug Tracker" = "https://github.com/voice-assistant/navidrome-voice/issues"
Changelog = "https://github.com/voice-assistant/navidrome-voice/blob/main/CHANGELOG.md"
Discussions = "https://github.com/voice-assistant/navidrome-voice/discussions"

[project.scripts]
voice-assistant = "src.main:main"
voice-assistant-setup = "scripts.setup:main"
voice-assistant-test = "scripts.test:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "scripts*"]
exclude = ["tests*", "docs*"]

[tool.setuptools.package-data]
"src" = ["*.yaml", "*.yml", "*.json"]
"scripts" = ["*.sh", "*.py"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | voice-assistant-ui
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["src", "scripts"]
skip_glob = ["voice-assistant-ui/**"]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    "voice-assistant-ui"
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "voice-assistant-ui/",
    "tests/",
    "build/",
    "dist/"
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "audio: marks tests that require audio hardware",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/voice-assistant-ui/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "voice-assistant-ui"]
skips = ["B101", "B601"]

